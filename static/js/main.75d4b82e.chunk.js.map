{"version":3,"sources":["Student.js","App.js","serviceWorker.js","index.js"],"names":["App","state","score","success","failure","this","setState","props","text","text1","className","name","onClick","addScore","subScore","university","Component","Student","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAmFeA,G,8DA9EX,aAAc,IAAD,8BACT,gBACKC,MAAO,CACRC,MAAO,EACPC,SAAS,EACTC,SAAS,GALJ,E,gEAUTC,KAAKC,SAAS,CACVJ,MAAOG,KAAKE,MAAML,U,iCAIf,IAAD,OACNG,KAAKC,SAAS,CACVJ,MAAOG,KAAKJ,MAAMC,MAAQ,IAE1B,WACO,EAAKD,MAAMC,OAAS,KACnB,EAAKI,SAAS,CAACH,SAAS,S,iCAM7B,IAAD,OACNE,KAAKC,SAAS,CACVJ,MAAOG,KAAKJ,MAAMC,MAAQ,IAE1B,WACO,EAAKD,MAAMC,OAAS,KACnB,EAAKI,SAAS,CAACF,SAAS,S,+BAOjC,IAGHI,EASAC,EAZE,OAoBN,OAfID,EAHcH,KAAKJ,MAAME,QAGlB,yCAGA,GAMPM,EAHcJ,KAAKJ,MAAMG,QAGjB,sCAGA,GAIV,yBAAKM,UAAU,WACX,yBAAKA,UAAU,QACT,wBAAIA,UAAU,eAAeL,KAAKE,MAAMI,KACpC,4BAAQD,UAAU,cAAcE,QAAU,kBAAM,EAAKC,aAArD,KACA,4BAAQH,UAAU,cAAcE,QAAU,kBAAM,EAAKE,aAArD,MAEhB,uBAAGJ,UAAU,kBAAkBL,KAAKE,MAAMQ,WAA1C,IAAuDP,EAAvD,IAA8DC,IAG1D,yBAAKC,UAAU,SACX,yBAAKA,UAAU,SAASL,KAAKJ,MAAMC,a,GAzE7Bc,cCeHhB,E,uKAZX,OACE,yBAAKU,UAAU,OACb,wBAAIA,UAAU,uBAAd,gBACC,kBAACO,EAAD,CAASN,KAAK,eAAeI,WAAW,OAAOb,MAAO,MACtD,kBAACe,EAAD,CAASN,KAAK,cAAcI,WAAW,kBAAkBb,MAAO,MAChE,kBAACe,EAAD,CAASN,KAAK,aAAaI,WAAW,OAAOb,MAAO,MACpD,kBAACe,EAAD,CAASN,KAAK,eAAeI,WAAW,wBAAwBb,MAAO,W,GAR9Dc,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75d4b82e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './student.css';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            score: 0,\r\n            success: false,\r\n            failure: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            score: this.props.score\r\n        });\r\n    }\r\n\r\n    addScore(){\r\n        this.setState({\r\n            score: this.state.score + 1\r\n        },\r\n            () => {\r\n                if(this.state.score >= 350){\r\n                    this.setState({success: true})\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    subScore(){\r\n        this.setState({\r\n            score: this.state.score - 1\r\n        },\r\n            () => {\r\n                if(this.state.score <= 200){\r\n                    this.setState({failure: true})\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n  render(){\r\n\r\n    const isSuccess = this.state.success;\r\n    let text;\r\n    if(isSuccess){\r\n        text = <span>Success</span>\r\n    }\r\n    else{\r\n        text = '';\r\n    }\r\n\r\n    const isFailure = this.state.failure;\r\n    let text1;\r\n    if(isFailure){\r\n        text1 = <span>Fail</span>\r\n    }\r\n    else{\r\n        text1 = '';\r\n    }\r\n\r\n    return (\r\n      <div className=\"student\">\r\n          <div className=\"left\">\r\n                <h2 className=\"studentName\">{this.props.name}\r\n                    <button className=\"addScorebtn\" onClick={ () => this.addScore()}>+</button>\r\n                    <button className=\"subScorebtn\" onClick={ () => this.subScore()}>-</button>\r\n                </h2>\r\n    <p className=\"universityName\">{this.props.university} {text} {text1}</p>\r\n          </div>\r\n        \r\n        <div className=\"right\">\r\n            <div className=\"score\">{this.state.score}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Student from './Student';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <h1 className=\"leadersboardHeading\">Leadersboard</h1>\n         <Student name=\"Rizwan Ahmed\" university=\"SMIU\" score={349}/> \n         <Student name=\"Nauman Khan\" university=\"Iqra University\" score={349}/> \n         <Student name=\"Qasim Awan\" university=\"SMIU\" score={319}/> \n         <Student name=\"Shahzaib Ali\" university=\"University Of Karachi\" score={202}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}